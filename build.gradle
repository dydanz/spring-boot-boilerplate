plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.boilerplate'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.1"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'redis.clients:jedis:4.4.3'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.postgresql:postgresql'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.flywaydb:flyway-database-postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/boilerplate'
    user = 'postgres'
    password = 'postgres'
}

task createMigration {
    doLast {
        def migrationName = project.hasProperty('migrationName') ? project.getProperty('migrationName') : 'migration'
        def timestamp = new Date().format('yyyyMMddHHmmss')
        def fileName = "V${timestamp}__${migrationName}.sql"
        def migrationDir = new File("${projectDir}/src/main/resources/db/migration")
        migrationDir.mkdirs()
        new File(migrationDir, fileName).createNewFile()
    }
} 